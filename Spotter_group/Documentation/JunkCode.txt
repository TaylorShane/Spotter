
        
        
        
        
        ItemsSource="{Binding Source={StaticResource work}, XPath=workout }" 
                      DisplayMemberPath="muscle" DropDownClosed="workout_cboBox_1_DropDownClosed"
        
        
        -->
        
        
        
        <!--
        <ComboBox SelectedValuePath="@GUID" 
            SelectedValue="{Binding XPath=/EssenceList/Essence[1]/LinkedEssences/LinkType[3]/LinkedEssence[1]/@GUID}" 
            ItemTemplate="{StaticResource rolelistTemplate}" 
        ItemsSource="{Binding XPath=/EssenceList/Essence[@Type]}" 
        IsSynchronizedWithCurrentItem="True" />




        
         <TextBlock>
                            <TextBlock.Text>
                                <MultiBinding StringFormat="{}{0}: {1}">
                                    <Binding Path="version"/>
                                    <Binding Path="muscle"/>

                                </MultiBinding>
                            </TextBlock.Text>
                        </TextBlock>
        <ComboBox>
  <ComboBox.ItemTemplate>
    <DataTemplate>
      <TextBlock>
        <TextBlock.Text>
          <MultiBinding StringFormat="{}{0}: {1}">
            <Binding Path=workout"/>
            <Binding Path="mus"/>
          </MultiBinding>
        </TextBlock.Text>
      </TextBlock>
    </DataTemplate>
  </ComboBox.ItemTemplate>
</ComboBox>    
        
        
        
        <Label Foreground="White"></Label>
            <ComboBox Grid.Column="0" Grid.Row="2" IsReadOnly="True" x:Name="cboBox_LoseWeight" 
                      Margin="5, 10, 5, 10" Height="25" VerticalAlignment="Top" Foreground="Black"
                      ItemsSource="{Binding Source={StaticResource work}, XPath=workout }" 
                      DisplayMemberPath="muscle">
            </ComboBox>
        
        
        -->
		<!--check box a dox
        <CheckBox Grid.Column="4" Grid.Row="1" Name="check_box_1" HorizontalAlignment="Center" VerticalAlignment="Center"></CheckBox>
        <CheckBox Grid.Column="4" Grid.Row="2" Name="check_box_2" HorizontalAlignment="Center" VerticalAlignment="Center"></CheckBox>
        <CheckBox Grid.Column="4" Grid.Row="3" Name="check_box_3" HorizontalAlignment="Center" VerticalAlignment="Center"></CheckBox>
        <CheckBox Grid.Column="4" Grid.Row="4" Name="check_box_4" HorizontalAlignment="Center" VerticalAlignment="Center"></CheckBox>
            -->
<!-- 
        
        <StackPanel Grid.Row="1" Grid.Column="0">
            <Label Foreground="White"></Label>
            <ComboBox Grid.Column="0" Grid.Row="2" IsReadOnly="True" x:Name="cboBox_LoseWeight" 
                      Margin="5, 10, 5, 10" Height="25" VerticalAlignment="Top" Foreground="Black"
                      ItemsSource="{Binding Source={StaticResource work}, XPath=workout }" 
                      DisplayMemberPath="muscle" DropDownClosed="cboBox_LoseWeight_DropDownClosed">
            </ComboBox>
            <TextBlock Margin="20" Grid.Column="2" Grid.Row="1" TextWrapping="Wrap" Name="workout_description_1" Foreground="White" HorizontalAlignment="Center" VerticalAlignment="Center">
            Lorem ipsum dolor sit amet, consectetur adipiscing elit. Curabitur leo libero, ullamcorper commodo varius sit amet, convallis vitae risus.
            </TextBlock>           
        </StackPanel>
        
        -->


		 //this little guy right here takes the chosen drop down text,
        //querys my xml file against the chosen muscle, displays the workout
        //and instructions

        /*  private void workout_cboBox_1_DropDownClosed(object sender, EventArgs e)
          {
              MessageBox.Show(workout_cboBox_1.Text);

              string user_workout = workout_cboBox_1.Text;

              MessageBox.Show(user_workout);

              IEnumerable<string> workoutNames = from exercise in XDocument.Load(stevePath).Descendants("")


        Element("name") == user_workout
                                           select exercise.Element("machine").Value;

            MessageBox.Show(workouts.FirstOrDefault());

            chest_machine.Text = workouts.FirstOrDefault().ToString();

          }*/






		   //set global first name
                    IEnumerable<string> FirstName = from Users in XDocument.Load(stevePath).Descendants("User")
                                                       where (string)Users.Element("Username") == user_name1
                                                       select Users.Element("FirstName").Value;


                    string firstname = FirstName.FirstOrDefault().ToString();
                    use_me.set_First_Name(firstname);

                    //set global last name
                    IEnumerable<string> LastName = from Users in XDocument.Load(stevePath).Descendants("User")
                                                    where (string)Users.Element("Username") == user_name1
                                                    select Users.Element("LastName").Value;


                    string lastname = LastName.FirstOrDefault().ToString();
                    use_me.set_Last_Name(lastname);

                    //set global birth
                    IEnumerable<string> birth = from Users in XDocument.Load(stevePath).Descendants("User")
                                                   where (string)Users.Element("Username") == user_name1
                                                   select Users.Element("LastName").Value;


                    string birthdate = birth.FirstOrDefault().ToString();
                    use_me.set_Birth_Date(birthdate);

                    //set global username
                    IEnumerable<string> usernme = from Users in XDocument.Load(stevePath).Descendants("User")
                                                where (string)Users.Element("Username") == user_name1
                                                select Users.Element("Username").Value;


                    string username1 = username.FirstOrDefault().ToString();
                    use_me.set_user_Name(username1);

                    //set global startdate
                    IEnumerable<string> startdate = from Users in XDocument.Load(stevePath).Descendants("User")
                                                where (string)Users.Element("Username") == user_name1
                                                select Users.Element("LastName").Value;


                    string startdate1 = startdate.FirstOrDefault().ToString();
                    use_me.set_Start_Date(startdate1);

                    //set global gender
                    IEnumerable<string> gender = from Users in XDocument.Load(stevePath).Descendants("User")
                                                where (string)Users.Element("Username") == user_name1
                                                select Users.Element("Gender").Value;


                    string gender1 = gender.FirstOrDefault().ToString();
                    use_me.set_Gender(gender1);

                    //set global weight
                    IEnumerable<string> curr_W = from Users in XDocument.Load(stevePath).Descendants("User")
                                                 where (string)Users.Element("Username") == user_name1
                                                 select Users.Element("CurrentWeight").Value;


                    string current_WEight = curr_W.FirstOrDefault().ToString();
                    use_me.set_Gender(current_WEight);

                    //set global height
                    IEnumerable<string> user_height = from Users in XDocument.Load(stevePath).Descendants("User")
                                                 where (string)Users.Element("Username") == user_name1
                                                 select Users.Element("CurrentHeight").Value;


                    string height1 = user_height.FirstOrDefault().ToString();
                    use_me.set_Gender(height1);

                    //set global gender
                    IEnumerable<string> workout1 = from Users in XDocument.Load(stevePath).Descendants("User")
                                                 where (string)Users.Element("Username") == user_name1
                                                 select Users.Element("Workout").Value;


                    string workout2 = workout1.FirstOrDefault().ToString();
                    use_me.set_Workout(workout2);

                    //set global admin
                    IEnumerable<string> admin = from Users in XDocument.Load(stevePath).Descendants("User")
                                                 where (string)Users.Element("Username") == user_name1
                                                 select Users.Element("Gender").Value;


                    string admin1 = admin.FirstOrDefault().ToString();
                    use_me.set_Gender(admin1);










					

            /*use_me.set_user_Name(user_name1);


               string new1 = "";

               XDocument xmlDoc = XDocument.Load(stevePath);

               new1 = xmlDoc.Element("users")
                       .Elements("profile")
                       .Where(x => x.Attribute("Id").Value == user_name1)
                       .FirstOrDefault()
                       .ToString();

               MessageBox.Show(new1 + "!!!");



              // Password
               IEnumerable<string> UserPassword = from Users in XDocument.Load(shanePath).Descendants("User")
                                                  where (string)Users.Element("Username") == refItem
                                                  select Users.Element("Password").Value;

               txtBoxPassword.Text = UserPassword.FirstOrDefault().ToString();



*/        <!-- text block descript a doodoos
        
        
        
     <muscle>
		<name>Core - 1</name>
		<details>Incline Barbell Bench Press</details>
		<type>2 sets, 6 reps, 80% 1 rep</type>
	</muscle>
        
        
        
        
        hey guys, if you are reading this you have stumbled upon my absolute insanity.
        i for the life of me can not figure out how to select (or read from another xml file)
                    1) the program
                    2) the version
                    3) the muscle group
        
                    all the above is needed to query and  display the following
        
                    A) workout name
                    B) workout instructions
        
        
     i am starting to believe either the format or the logic is becoming to complicated. the nutrition querys are good examples but they
        dont combine multi binding, additionally i tried looking in the other xml files for what program/version the user selected, maybe read from there.
        
        im not sure if i should do multiple combo boxes? this seemed to be  a little more automated, like we wanted this specific xml file to handle everything?
        
        im covering my ass with this and just made a simple xml file and query like nutrition, sorry i couldnt get more complicated with this, i spent 
        over half a day playing around its just not super flush, u can check junk code for all my half ass ideas and trys
        
        
                    drop down
        <StackPanel Grid.Column="0" Grid.Row="1">
            <Label Foreground="Wheat">Please Select</Label>
            <ComboBox Grid.Column="0" Grid.Row="2" IsReadOnly="True" x:Name="workout_cboBox" 
                      Margin="5, 10, 5, 10" Height="25" VerticalAlignment="Top" Foreground="Black"
                      DropDownClosed="workout_cboBox_DropDownClosed"
                      ItemsSource="{Binding Source={StaticResource work}, XPath=muscle }" 
                      DisplayMemberPath="name">
                
            </ComboBox>
            
            
            
        </StackPanel>-->